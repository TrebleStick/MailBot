local_costmap:
  global_frame: odom
  robot_base_frame: base_link
  update_frequency: 10.0
  publish_frequency: 5.0
  static_map: false
  rolling_window: true
  width: 6.0 # width of the costmap
  height: 6.0
  resolution: 0.05 # map resolution


  # Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
  robot_radius: 0.40  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
  # footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular
  holonomic_robot: false

  map_type: voxel

  # plugins:
  #   - {name: obstacle_layer,        type: "costmap_2d::VoxelLayer"}
  #   - {name: inflation_layer,        type: "costmap_2d::InflationLayer"}
  #   - {name: static_layer,       type: "costmap_2d::StaticLayer"} # local planner does not need static layer (i.e. existing map)

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
# inflation_layer:
#   enabled:              true
#   cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
#   inflation_radius:     0.3  # max. distance from an obstacle at which costs are incurred for planning paths.obstacle_layer: # Created a new namespace (and plugin) called obstacle_layer

  obstacle_layer: # Created a new namespace (and plugin) called obstacle_layer
    enabled:              true
    max_obstacle_height:  1.6
    origin_z:             0.0
    z_resolution:         0.2
    z_voxels:             15 # z_resolution*z_voxels should be height of robot or more - i.e. if your sensors see heigher
    publish_voxel_map: false

    # unknown_threshold:    15
    mark_threshold:       0
    combination_method:   1
    track_unknown_space:  true    #true needed for disabling global path planning through unknown space
    obstacle_range: 2.5 # The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters. This can be over-ridden on a per-sensor basis.
    raytrace_range: 10.0 # The default range in meters at which to raytrace out obstacles from the map using sensor data. This can be over-ridden on a per-sensor basis.

    publish_voxel_map: false

    observation_sources:  kinect_laserscan  kinect_pointC
    kinect_laserscan:
      data_type: LaserScan
      topic: /kinect_scan
      sensor_frame: base_link # technically camera_link but it think it is out of bounds
      marking: true # add to cost map
      clearing: true # remove from cost map
      min_obstacle_height: 0.25
      max_obstacle_height: 2.05
      inf_is_valid: true
      obstacle_range: 3.5
    kinect_pointC:
      data_type: PointCloud2
      topic: camera/depth_registered/points
      sensor_frame: base_link
      marking: true
      clearing: false
      min_obstacle_height: 0.45
      max_obstacle_height: 1.95


  #cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
  inflation_layer:
    enabled:              true
    cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
    inflation_radius:     0.2  # max. distance from an obstacle at which costs are incurred for planning paths.

  static_layer:
    enabled: true


  obstacle_layer: # Created a new namespace (and plugin) called obstacle_layer
    enabled:              true
    max_obstacle_height:  1.6
    origin_z:             0.0
    z_resolution:         0.2
    z_voxels:             15 # z_resolution*z_voxels should be height of robot or more - i.e. if your sensors see heigher
    publish_voxel_map: false

    unknown_threshold:    15
    mark_threshold:       0
    combination_method:   1
    track_unknown_space:  true    #true needed for disabling global path planning through unknown space
    obstacle_range: 1.5 # The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters. This can be over-ridden on a per-sensor basis.
    raytrace_range: 10.0 # The default range in meters at which to raytrace out obstacles from the map using sensor data. This can be over-ridden on a per-sensor basis.

    publish_voxel_map: false

    observation_sources:  kinect_laserscan # kinect_pointC
    kinect_laserscan:
      data_type: LaserScan
      topic: /kinect_scan
      sensor_frame: base_link # technically camera_link but it think it is out of bounds
      marking: true # add to cost map
      clearing: true # remove from cost map
      min_obstacle_height: 0.25
      max_obstacle_height: 2.05
      inf_is_valid: true
      obstacle_range: 7.5
    # kinect_pointC:
    #   data_type: PointCloud2
    #   topic: camera/depth_registered/points
    #   sensor_frame: base_link
    #   marking: true
    #   clearing: false
    #   min_obstacle_height: 0.15
    #   max_obstacle_height: 1.95


  #cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
  # inflation_layer:
  #   enabled:              true
  #   cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
  #   inflation_radius:     0.2  # max. distance from an obstacle at which costs are incurred for planning paths.
  #
  # static_layer:
  #   enabled: true
